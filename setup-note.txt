A simple logging for a specific application:


### Step 1: Create a Filebeat Configuration

Create a Filebeat configuration file (e.g., `filebeat.yml`) with the following content:

```yaml
filebeat.inputs:
- type: container
  paths:
    - /var/log/*.log

output.s3:
  bucket: your-s3-bucket-name
  region: your-s3-region
  access_key_id: your-access-key-id
  secret_access_key: your-secret-access-key
  endpoint: your-s3-endpoint  # Optional, if you're using a non-AWS S3-compatible service
```

### Step 2: Create a Kubernetes Secret
Reference: https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-kubectl/

Create a Kubernetes Secret to store your AWS access keys and secret access keys using the following `kubectl` command:

```bash
kubectl create secret generic aws-credentials \
  --from-literal=AWS_ACCESS_KEY_ID=your-access-key-id \
  --from-literal=AWS_SECRET_ACCESS_KEY=your-secret-access-key
```

### Step 3: Create a Kubernetes Pod
Reference: https://kubernetes.io/docs/concepts/cluster-administration/logging/

Modify your Kubernetes Pod manifest (e.g., `pod.yaml`) to include Filebeat as a sidecar container:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: counter
spec:
  containers:
  - name: count
    image: busybox:1.28
    args:
    - /bin/sh
    - -c
    - >
      i=0;
      while true;
      do
        echo "$i: $(date)" >> /var/log/1.log;
        i=$((i+1));
        sleep 1;
      done
    volumeMounts:
    - name: varlog
      mountPath: /var/log
  - name: filebeat
    image: docker.elastic.co/beats/filebeat:7.20.0
    volumeMounts:
    - name: varlog
      mountPath: /var/log
    - name: filebeat-config
      mountPath: /etc/filebeat
    env:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: aws-credentials  # The name of your Secret
          key: AWS_ACCESS_KEY_ID
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: aws-credentials  # The name of your Secret
          key: AWS_SECRET_ACCESS_KEY
  volumes:
  - name: varlog
    emptyDir: {}
  - name: filebeat-config
    configMap:
      name: filebeat-config-map  # Create a ConfigMap with your Filebeat configuration
```
Important:
These steps and file snippets should help you set up log shipping with Filebeat and AWS S3 in your Kubernetes environment while maintaining security with AWS credentials stored in a Kubernetes Secret. Make sure to replace placeholder values with your actual configurations and values.